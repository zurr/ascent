Index: src/game/Player.cpp
===================================================================
--- src/game/Player.cpp    (revision 976)
+++ src/game/Player.cpp    (working copy)
@@ -335,6 +335,7 @@
    trigger_on_stun_chance = 100;
    m_modphyscritdmgPCT = 0;
    m_RootedCritChanceBonus = 0;
+    m_ModInterrMRegenPCT = 0;
    m_rap_mod_pct = 0;
    m_modblockvalue = 0;
    m_summoner = m_summonInstanceId = m_summonMapId = 0;
@@ -5793,7 +5794,7 @@
       CalcResistance(0);
}

-void Player::RegenerateMana()
+void Player::RegenerateMana(float RegenPct)
{
    const static float ClassMultiplier[12]={
        0,0,0.2,0.25,0,0.25,0,0.2,0.25,0.2,0,0.2};
@@ -5811,7 +5812,7 @@
            amt = (Spirit*ClassMultiplier[cl]+ClassFlatMod[cl])*PctPowerRegenModifier[POWER_TYPE_MANA];

            //Apply shit from conf file
-            amt *= sWorld.getRate(RATE_POWER1);
+            amt *= sWorld.getRate(RATE_POWER1)*RegenPct;

            //Near values from official
            // wowwiki says no faster mp while resting, anyways this is wrong it reduces instead of increasing.
@@ -5902,7 +5903,7 @@
    }
}

-void Player::RegenerateEnergy()
+void Player::RegenerateEnergy(float RegenPct)
{
    uint32 cur = GetUInt32Value(UNIT_FIELD_POWER4);
    uint32 mh = GetUInt32Value(UNIT_FIELD_MAXPOWER4);
Index: src/game/Player.h
===================================================================
--- src/game/Player.h    (revision 976)
+++ src/game/Player.h    (working copy)
@@ -925,6 +925,7 @@
    float SpellHealDoneBySpr[7];
    uint32 m_modphyscritdmgPCT;
    uint32 m_RootedCritChanceBonus;
+    uint32 m_ModInterrMRegenPCT;
    
    uint32 FlatStatModPos[5];
    uint32 FlatStatModNeg[5];
@@ -948,9 +949,9 @@
    void CalcStat(uint32 t);
    float CalcRating(uint32 t);
    void RecalcAllRatings();
-    void RegenerateMana();
+    void RegenerateMana(float RegenPct);
    void RegenerateHealth(bool inCombat);
-    void RegenerateEnergy();
+    void RegenerateEnergy(float RegenPct);
    void LooseRage();
    uint32 SoulStone;
    uint32 SoulStoneReciever;
Index: src/game/Spell.cpp
===================================================================
--- src/game/Spell.cpp    (revision 976)
+++ src/game/Spell.cpp    (working copy)
@@ -1832,7 +1832,10 @@
        u_caster->m_canMove = true;
  
        if(m_usesMana && !failed && u_caster->GetPowerType()==POWER_TYPE_MANA)
+        {
            u_caster->setPRegenTimer(5000); /* 5 Seconds */
+            u_caster->setPIRegenTimer(2000);
+        }
    }
    /* Mana Regenerates while in combat but not for 5 seconds after each spell */
    /* Only if the spell uses mana, will it cause a regen delay.
Index: src/game/SpellAuras.cpp
===================================================================
--- src/game/SpellAuras.cpp    (revision 976)
+++ src/game/SpellAuras.cpp    (working copy)
@@ -5185,8 +5185,13 @@

void Aura::SpellAuraModManaRegInterrupt(bool apply)
{
-    //make regen always active
-    // allows you to continue %30 of mana regen in combat
+    if (m_target->IsPlayer())
+    {
+        if (apply)
+            static_cast<Player*>(m_target)->m_ModInterrMRegenPCT += mod->m_amount;
+        else
+            static_cast<Player*>(m_target)->m_ModInterrMRegenPCT -= mod->m_amount;
+    }
}

void Aura::SpellAuraModTotalStatPerc(bool apply)
Index: src/game/Unit.cpp
===================================================================
--- src/game/Unit.cpp    (revision 976)
+++ src/game/Unit.cpp    (working copy)
@@ -138,6 +138,7 @@
    m_attackTimer = 0;
    m_H_regenTimer = 2000;
    m_P_regenTimer = 2000;
+    m_P_I_regenTimer = 2000;


    //    if(GetTypeId() == TYPEID_PLAYER) //only player for now
@@ -284,9 +285,15 @@
            m_H_regenTimer -= p_time;
        //most of the times the 2 timers will be the same (except on spell casts)
        if(p_time >= m_P_regenTimer)
-            RegeneratePower();    
+            RegeneratePower(false);    
        else
+        {
+            if (p_time >= m_P_I_regenTimer&&this->IsPlayer())
+                RegeneratePower(true);
+            else
+                m_P_I_regenTimer -= p_time;
            m_P_regenTimer -= p_time;
+        }

        if(m_aiInterface != NULL && m_useAI)
            m_aiInterface->Update(p_time);
@@ -958,10 +965,11 @@
    }
}

-void Unit::RegeneratePower()
+void Unit::RegeneratePower(bool isinterrupted)
{
         // This is only 2000 IF the power is not rage
     m_P_regenTimer = 2000;//set next regen time
+    m_P_I_regenTimer = 2000;//set next interrupted regen time

    if (!isAlive())
        return;
@@ -970,13 +978,18 @@
    if(this->IsPlayer())
    {
        uint32 powertype = GetPowerType();
+        float RegenPct = 1.0f;
        switch(powertype)
        {
        case POWER_TYPE_MANA:
-            static_cast<Player*>(this)->RegenerateMana();
+            if (isinterrupted)
+                RegenPct = static_cast<Player*>(this)->m_ModInterrMRegenPCT/100.0f;
+            static_cast<Player*>(this)->RegenerateMana(RegenPct);
            break;
        case POWER_TYPE_ENERGY:
-            static_cast<Player*>(this)->RegenerateEnergy();
+            if (isinterrupted)
+                RegenPct = 0.0f;
+            static_cast<Player*>(this)->RegenerateEnergy(RegenPct);
            break;
        }
        
@@ -1000,7 +1013,7 @@

        // druids regen mana when shapeshifted
        if(getClass() == DRUID && powertype != POWER_TYPE_MANA)
-            static_cast<Player*>(this)->RegenerateMana();
+            static_cast<Player*>(this)->RegenerateMana(RegenPct);

        // These only NOT in combat
        if(!static_cast<Player*>(this)->isInCombat())
@@ -1009,6 +1022,7 @@
            if(powertype == POWER_TYPE_RAGE)
            {
                m_P_regenTimer = 3000;
+                m_P_I_regenTimer = 3000;
                static_cast<Player*>(this)->LooseRage();
            }
        }
Index: src/game/Unit.h
===================================================================
--- src/game/Unit.h    (revision 976)
+++ src/game/Unit.h    (working copy)
@@ -647,9 +647,10 @@
    bool isCasting();
       void CalculateResistanceReduction(Unit *pVictim,dealdamage *dmg);
    void RegenerateHealth();
-    void RegeneratePower();
+    void RegeneratePower(bool isinterrupted);
    inline void setHRegenTimer(uint32 time) {m_H_regenTimer = time; }
    inline void setPRegenTimer(uint32 time) {m_P_regenTimer = time; }
+    inline void setPIRegenTimer(uint32 time) {m_P_I_regenTimer = time; }
    void DeMorph();
    uint32 ManaShieldAbsorb(uint32 dmg);
    void smsg_AttackStart(Unit* pVictim);
@@ -1042,6 +1043,7 @@

    uint32 m_H_regenTimer;
    uint32 m_P_regenTimer;
+    uint32 m_P_I_regenTimer; //PowerInterruptedRegenTimer.
    uint32 m_state;         // flags for keeping track of some states
    uint32 m_attackTimer;   // timer for attack
    uint32 m_attackTimer_1;