Index: src/game/Player.cpp
===================================================================
--- src/game/Player.cpp    (revision 976)
+++ src/game/Player.cpp    (working copy)
@@ -4233,7 +4233,7 @@
    const float baseDodge[12] = { 0, 0, 0.75, 0.64, 0, 3, 0, 1.75, 3.25, 2, 0, 0.75 };
    const float dodgeRatio[12] = { 0, 30, 30, 40, 21, 30, 0, 30, 30, 30, 0, 30 };
  
-    float tmp = baseDodge[clss] + (GetUInt32Value( UNIT_FIELD_STAT1) / dodgeRatio[clss]) + (GetSkillAmt(SKILL_DEFENSE)*.04) + this->GetDodgeFromSpell();
+    float tmp = baseDodge[clss] + (GetUInt32Value( UNIT_FIELD_STAT1) / dodgeRatio[clss]) + this->GetDodgeFromSpell();
    tmp+=CalcRating(2);//dodge rating
    SetFloatValue(PLAYER_DODGE_PERCENTAGE,min(tmp,95.0));

@@ -4241,7 +4241,7 @@
    tmp+=CalcRating(4);//block rating
    SetFloatValue(PLAYER_BLOCK_PERCENTAGE,min(tmp,95.0));

-    tmp = 5.0f + GetSkillAmt(SKILL_DEFENSE)*.04  + this->GetParryFromSpell();
+    tmp = 5.0f + this->GetParryFromSpell();
    tmp+=CalcRating(3);
    SetFloatValue(PLAYER_PARRY_PERCENTAGE,max(0,min(tmp,95.0))); //let us not use negative parry. Some spells decrease it
/* The formula is generated as follows:
Index: src/game/Unit.cpp
===================================================================
--- src/game/Unit.cpp    (revision 976)
+++ src/game/Unit.cpp    (working copy)
@@ -1114,9 +1114,7 @@
void Unit::Strike(Unit *pVictim, uint32 damage_type, SpellEntry *ability, int32 add_damage, int32 pct_dmg_mod, uint32 exclusive_damage, bool disable_proc)
{
    if (!pVictim->isAlive() || !isAlive()  || IsStunned() || IsPacified())
-    {
        return;
-    }
    if(!isInFront(pVictim))
    {
        if(IsPlayer())
@@ -1125,25 +1123,18 @@
            return;
        }
    }
-    /*if(this->IsPlayer())
-    {
-        ((Player*)this)->CombatModeDelay = COMBAT_DECAY_TIME;
-    }
-    else if(this->IsPet())
-    {
-        Player*p = ((Pet*)this)->GetPetOwner();
-        if(p)
-            p->CombatModeDelay = COMBAT_DECAY_TIME;
-    }*/

    dealdamage dmg              = {0,0,0};
    
    Item * it = NULL;
-    
+
+    float miss               = 5.0f;
    float dodge                 = 0.0f;
+    float parry                 = 0.0f;
+    float glanc              = 0.0f;
    float block                 = 0.0f;
-    float crit                  = 0.0f;
-    float parry                 = 0.0f;
+    float crit                 = 0.0f;
+    float crush              = 0.0f;

    uint32 targetEvent          = 0;
    uint32 hit_status           = 0;
@@ -1163,21 +1154,21 @@
    bool backAttack             = isInBack( pVictim );
    uint32 vskill = 0;
    
-    
+//----------Victim Skills
+
    if(pVictim->IsPlayer())
    {
        vskill = ((Player*)pVictim)->GetSkillAmt(SKILL_DEFENSE);
        if((damage_type != RANGED) && !backAttack)
        {
            it = ((Player*)pVictim)->GetItemInterface()->GetInventoryItem(EQUIPMENT_SLOT_OFFHAND);
+//block chance
            if(it && it->GetProto()->InventoryType==INVTYPE_SHIELD)
-            {
                block = pVictim->GetFloatValue(PLAYER_BLOCK_PERCENTAGE);
-            }
-            dodge = pVictim->GetFloatValue(PLAYER_DODGE_PERCENTAGE);
-            
-//            if(((Player*)pVictim)->HasSpell(3127))//only players that have parry skill/spell may parry
-//                parry = pVictim->GetFloatValue(PLAYER_PARRY_PERCENTAGE);
+//dodge chance
+            if (pVictim->m_stunned<=0) //if stunned => can't dodge. wowwiki
+                dodge = pVictim->GetFloatValue(PLAYER_DODGE_PERCENTAGE);
+//parry chance
            if(pVictim->can_parry)
                parry = pVictim->GetFloatValue(PLAYER_PARRY_PERCENTAGE);
        }
@@ -1187,10 +1178,11 @@
    {
        if(damage_type != RANGED && !backAttack)
            dodge = pVictim->GetUInt32Value(UNIT_FIELD_STAT1) / 14.5;
-
        victim_skill = pVictim->getLevel() * 5;
    }

+//---------------Attacker Skills
+
    if(this->IsPlayer())
    {      
        self_skill=0;
@@ -1200,23 +1192,23 @@
        
        if(disarmed)
            it = NULL;
-        else if(damage_type == MELEE)//melee,
+        switch (damage_type)
        {
+        case MELEE:
            it = pr->GetItemInterface()->GetInventoryItem(EQUIPMENT_SLOT_MAINHAND);
            hitmodifier+=pr->CalcRating(5);
            self_skill = float2int32(pr->CalcRating(20));
-        }
-        else if(damage_type == DUALWIELD)//dual wield
-        {
+            break;
+        case DUALWIELD:
            it = pr->GetItemInterface()->GetInventoryItem(EQUIPMENT_SLOT_OFFHAND);
            hitmodifier+=pr->CalcRating(5);
            self_skill = float2int32(pr->CalcRating(21));
-        }
-        else if(damage_type == RANGED)
-        {
+            break;
+        case RANGED:
            it = pr->GetItemInterface()->GetInventoryItem(EQUIPMENT_SLOT_RANGED);
            hitmodifier+=pr->CalcRating(6);
            self_skill = float2int32(pr->CalcRating(0));
+            break;
        }

        if(it)
@@ -1228,94 +1220,147 @@
            SubClassSkill=SKILL_UNARMED;

        self_skill += pr->GetSkillAmt(SubClassSkill);
-        
+//crit chance        
        crit = GetFloatValue(PLAYER_CRIT_PERCENTAGE);
-
-        // block shit
-        if(vskill && block != 0.0f)
-        {
-            int diff = (int)vskill - (int)self_skill;
-            float fdiff = (float)diff * 0.04f;
-            block += fdiff;
-        }
    }
    else
    {
        self_skill = this->getLevel() * 5;
-        crit = (this->getLevel()-pVictim->getLevel()+1)*5+(self_skill-victim_skill)*0.04;//don't ask me ... that's on wowwiki
+        crit = 5.0f;
    }

-    if(pVictim->IsPlayer())
+//----------Other Chances
+
+//crushing blow chance
+    if(pVictim->IsPlayer()&&!this->IsPlayer()&&!ability)
+            crush = max( 0.0 , -15.0+2.0*((float)self_skill-(float)min(pVictim->getLevel()*5,victim_skill)));
+//glancing blow chance
+    if (this->IsPlayer()&&!pVictim->IsPlayer()&&!ability)
+            glanc = max( 0.0 , 10.0 + (float)victim_skill - (float)min(this->getLevel()*5,self_skill));
+
+//-----------Chance Mods
+
+    if (pVictim->IsPlayer())
    {
        if((damage_type != RANGED))
            crit += static_cast<Player*>(pVictim)->res_M_crit_get();
-        else crit += static_cast<Player*>(pVictim)->res_R_crit_get(); //this could be ability but in that case we overwrite the value
+        else
+            crit += static_cast<Player*>(pVictim)->res_R_crit_get(); //this could be ability but in that case we overwrite the value
    }
+    if (pVictim->IsPlayer()&&pVictim->GetStandState()) //every not standing state is >0
+    {
+        miss = 0.0f;
+        dodge = 0.0f;
+        parry = 0.0f;
+        block = 0.0f;
+        crush = 0.0f;
+        crit = 100.0f;

-//  if we get a negative chance .. we will never use it again
-//    if(crit<0)
-//        crit=0;
-
-    float vsk = (self_skill*0.04);
-    dodge -= vsk;
-    parry -= vsk;
+    }
+    if (damage_type==RANGED) //can't be dodge, parry or glancing blow
+    {
+        dodge=0.0f;
+        parry=0.0f;
+        glanc=0.0f;
+    }
+    else
+        if (this->IsPlayer())
+        {
+            it = ((Player*)this)->GetItemInterface()->GetInventoryItem(EQUIPMENT_SLOT_OFFHAND);
+            if(it && it->GetProto()->InventoryType==INVTYPE_WEAPON && !ability)//dualwield to-hit penalty
+                hitmodifier -= 19.0;
+            else
+            {
+                it = ((Player*)this)->GetItemInterface()->GetInventoryItem(EQUIPMENT_SLOT_MAINHAND);
+                if(it && it->GetProto()->InventoryType==INVTYPE_2HWEAPON)//2 handed weapon to-hit penalty
+                hitmodifier -= 4.0;
+            }
+        }
    
+    // Mods by skill diff.
+    float vsk = (float)self_skill-(float)victim_skill;
+    dodge = max(0.0,dodge-vsk*0.04);
+    if (parry) parry = max(0.0,parry-vsk*0.04);
+    if (block) block = max(0.0,block-vsk*0.04);
+    if (pVictim->IsPlayer())
+        crit = max(0.0,crit+vsk*0.04);
+    else
+        crit = max(0.0,crit+min(vsk,0.0)*0.2); //wowwiki. 29.07.07

    //this is official formula, don't use anything else!
-    float hitchance = 95.0 -(victim_skill-self_skill)*0.04 +hitmodifier;
+    float hitchance = min(100.0, 95.0 + vsk +hitmodifier);
    // grep tweak: previously 95.0f
    
-    //(((float)(self_skill+this->getLevel())/(float)(victim_skill+pVictim->getLevel()))*125.0f + hitmodifier );
-    
    if(ability && ability->SpellGroupType)
    {
        SM_FFValue(SM_CriticalChance,&crit,ability->SpellGroupType);
        SM_FFValue(SM_FResist,&hitchance,ability->SpellGroupType);
    }
-    
+
+//-------Cummulative chances.
+    float chances[7];
+    chances[0]=miss;
+    chances[1]=chances[0]+dodge;
+    chances[2]=chances[1]+parry;
+    chances[3]=chances[2]+glanc;
+    chances[4]=chances[3]+block;
+    chances[5]=chances[4]+crit;
+    chances[6]=chances[5]+crush;
+    float Roll = sRand.rand()*100.0f;
+    uint32 r = 0;
+    while (r<7&&Roll>chances[r])
+        r++;
+
+// Roll proc
    uint32 abs = 0;
-    if((!ability) && hitchance < 100.0f && Rand(100.0f - hitchance)) //Miss
+
+    switch (r)
    {
+    case 0 : //miss
        hit_status |= HITSTATUS_MISS;
-
        // dirty ai agro fix
        // make mob aggro when u miss it
        // grep: dirty fix for this
        if(pVictim->GetTypeId() == TYPEID_UNIT)
            pVictim->GetAIInterface()->AttackReaction(this, 1, 0);
-    }
-    else if ((!ability)&&Rand(dodge)) //Dodge
-    {
+        break;
+    case 1: //dodge
        CALL_SCRIPT_EVENT(pVictim, OnTargetDodged)(this);
        CALL_SCRIPT_EVENT(this, OnDodged)(this);
        targetEvent = 1;
        vstate = DODGE;
        pVictim->Emote(EMOTE_ONESHOT_PARRYUNARMED);            // Animation
-        if(pVictim->IsPlayer())
-        {
+        if(pVictim->IsPlayer() && ((Player*)pVictim)->getClass()!=4)//this excludes rogues because of 'riposte' CAS
+        {                                                           //hunters for 'mongoose bite' and warriors for 'revenge'
            pVictim->SetFlag(UNIT_FIELD_AURASTATE,AURASTATE_FLAG_DODGE_BLOCK);    //SB@L: Enables spells requiring dodge
            if(!sEventMgr.HasEvent(pVictim,EVENT_DODGE_BLOCK_FLAG_EXPIRE))
                sEventMgr.AddEvent(pVictim,&Unit::EventAurastateExpire,(uint32)AURASTATE_FLAG_DODGE_BLOCK,EVENT_DODGE_BLOCK_FLAG_EXPIRE,5000,1);
            else sEventMgr.ModifyEventTimeLeft(pVictim,EVENT_DODGE_BLOCK_FLAG_EXPIRE,5000);
        }
-    }
-    else if ((!ability)&&Rand(parry)) //Parry
-    {
+        break;
+    case 2: //parry
        CALL_SCRIPT_EVENT(pVictim, OnTargetParried)(this);
        CALL_SCRIPT_EVENT(this, OnParried)(this);
        targetEvent = 3;
        vstate = PARRY;
        pVictim->Emote(EMOTE_ONESHOT_PARRYUNARMED);            // Animation
        if(pVictim->IsPlayer())
-        {
+        {   //hunters for 'counterattack' and warriors for 'revenge'
+            //there is no spell with CAS or TAS 7(FLAG_PARRY) except 'counterattack', so - no need to check class here
            pVictim->SetFlag(UNIT_FIELD_AURASTATE,AURASTATE_FLAG_PARRY);    //SB@L: Enables spells requiring parry
            if(!sEventMgr.HasEvent(pVictim,EVENT_PARRY_FLAG_EXPIRE))
-                sEventMgr.AddEvent(pVictim,&Unit::EventAurastateExpire,(uint32)AURASTATE_FLAG_PARRY,EVENT_PARRY_FLAG_EXPIRE,5000,1);
+            sEventMgr.AddEvent(pVictim,&Unit::EventAurastateExpire,(uint32)AURASTATE_FLAG_PARRY,EVENT_PARRY_FLAG_EXPIRE,5000,1);
            else sEventMgr.ModifyEventTimeLeft(pVictim,EVENT_PARRY_FLAG_EXPIRE,5000);
+            if( ((Player*)pVictim)->getClass()==1 || ((Player*)pVictim)->getClass()==4 )//warriors for 'revenge' and rogues for 'riposte'
+            {
+                pVictim->SetFlag(UNIT_FIELD_AURASTATE,AURASTATE_FLAG_DODGE_BLOCK);    //SB@L: Enables spells requiring dodge
+                if(!sEventMgr.HasEvent(pVictim,EVENT_DODGE_BLOCK_FLAG_EXPIRE))
+                    sEventMgr.AddEvent(pVictim,&Unit::EventAurastateExpire,(uint32)AURASTATE_FLAG_DODGE_BLOCK,EVENT_DODGE_BLOCK_FLAG_EXPIRE,5000,1);
+                else sEventMgr.ModifyEventTimeLeft(pVictim,EVENT_DODGE_BLOCK_FLAG_EXPIRE,5000);
+            }
        }
-    }
-    else//hit
-    {
+        break;
+    default: //not miss,dodge or parry

        hit_status |= HITSTATUS_HITANIMATION;//hit animation on victim

@@ -1360,44 +1405,61 @@
                dmg.full_damage = 0;
            else
            {
-                dmg.full_damage *= float2int32(pVictim->DamageTakenPctMod[0]);
+                dmg.full_damage = float2int32(dmg.full_damage*pVictim->DamageTakenPctMod[0]);
                if(pct_dmg_mod)
                    dmg.full_damage = (dmg.full_damage*pct_dmg_mod)/100;
            }
            
            dmg.full_damage += pVictim->DamageTakenMod[0]+add_damage;
            if(dmg.damage_type == RANGED)
-            {
-                //dmg.full_damage += pVictim->RangedDamageTaken;
                dmg.full_damage += (((dmg.full_damage/100)*pVictim->RangedDamageTakenPct) + pVictim->RangedDamageTaken);
-            }
-            
+        
            if(dmg.full_damage < 0)
                dmg.full_damage = 0;
-
-            if (Rand(block) && pVictim->GetTypeId() == TYPEID_PLAYER) //Block block can only appear if we have shield!
+            // now let's see if it is a special blow.
+            switch (r)
            {
+            case 3: //glancing blow
+                {
+                //self_skill is capped here by lvl*5
+                int32 dif = (victim_skill-min(this->getLevel()*5,self_skill));
+                uint32 low_glance = max(1,min(90,130-5*dif)); //FIXME:'caster' classes should be farther reduced by 60
+                uint32 high_glance = max(20,min(99,120-3*dif)); //FIXME:'caster' classes should be farther reduced by 30
+                high_glance = low_glance + sRand.randInt(high_glance-low_glance);
+                dmg.full_damage = (high_glance*dmg.full_damage)/100;//dif>0 check not needed here
+                hit_status |= HITSTATUS_GLANCING;
+                //as a result this should reduce damage on glancing blows against PlayerLevel+3 Bosses by an average 35%
+                }
+                break;
+            case 4: //block
+                {
                Item * shield = ((Player*)pVictim)->GetItemInterface()->GetInventoryItem(EQUIPMENT_SLOT_OFFHAND);
-                if(shield)
+                if(shield) //just in case the shield disappeared between calculating chances to block and here
                {
                    targetEvent = 2;
                    pVictim->Emote(EMOTE_ONESHOT_PARRYSHIELD);// Animation
-//                    blocked_damage = shield->GetProto()->Block+pVictim->GetUInt32Value(UNIT_FIELD_STAT0)/20;
-                    //patch from Onemore
+                    //patch from Onemore+Shadowhunter_22+SB@IL; it is getting longer with each iteration
                    //blocked_damage = shield->GetProto()->Block*(1.0+((Player*)pVictim)->GetBlockFromSpell()/100)+pVictim->GetUInt32Value(UNIT_FIELD_STAT0)/20;
                    blocked_damage = uint32((shield->GetProto()->Block + ((Player*)pVictim)->m_modblockvalue)*(1.0+((Player*)pVictim)->GetBlockFromSpell()/100)+pVictim->GetUInt32Value(UNIT_FIELD_STAT0)/20);
-
-                    if(dmg.full_damage <= (int32)blocked_damage)
+                    if(dmg.full_damage <= (int32)blocked_damage)
                    {
                        CALL_SCRIPT_EVENT(pVictim, OnTargetBlocked)(this, blocked_damage);
                        CALL_SCRIPT_EVENT(this, OnBlocked)(pVictim, blocked_damage);
                        vstate = BLOCK;
                        vproc |= PROC_ON_BLOCK_VICTIM;
                    }
+                    if(pVictim->IsPlayer())//not necessary now but we'll have blocking mobs in future
+                    {                                                          
+                        pVictim->SetFlag(UNIT_FIELD_AURASTATE,AURASTATE_FLAG_DODGE_BLOCK);    //SB@L: Enables spells requiring dodge
+                        if(!sEventMgr.HasEvent(pVictim,EVENT_DODGE_BLOCK_FLAG_EXPIRE))
+                            sEventMgr.AddEvent(pVictim,&Unit::EventAurastateExpire,(uint32)AURASTATE_FLAG_DODGE_BLOCK,EVENT_DODGE_BLOCK_FLAG_EXPIRE,5000,1);
+                        else sEventMgr.ModifyEventTimeLeft(pVictim,EVENT_DODGE_BLOCK_FLAG_EXPIRE,5000);
+                    }
                }
-            }
-            else if (Rand(crit)) //Crictical Hit
-            {
+                }
+                break;
+            case 5: //crit
+                {
                hit_status |= HITSTATUS_CRICTICAL;
                int32 dmgbonus = dmg.full_damage;
                if(ability && ability->SpellGroupType)
@@ -1414,10 +1476,6 @@
                        dmg.full_damage += float2int32(dmg.full_damage*static_cast<Player*>(this)->IncreaseCricticalByTypePCT[((Creature*)pVictim)->GetCreatureName() ? ((Creature*)pVictim)->GetCreatureName()->Type : 0]);
                }
                
-                // burlex: this causes huge damage increases. I'm not sure what it's meant to accompilsh either, so
-                //         i'm gonna comment it.
-
-                /*dmg.full_damage = (dmg.full_damage*(100+dmgbonus))/100;*/
                pVictim->Emote(EMOTE_ONESHOT_WOUNDCRITICAL);
                vproc |= PROC_ON_CRIT_HIT_VICTIM;
                aproc |= PROC_ON_CRIT_ATTACK;
@@ -1432,45 +1490,15 @@

                CALL_SCRIPT_EVENT(pVictim, OnTargetCritHit)(this, dmg.full_damage);
                CALL_SCRIPT_EVENT(this, OnCritHit)(pVictim, dmg.full_damage);
+                }
+                break;
+            case 6: //crushing blow
+                hit_status |= HITSTATUS_CRUSHINGBLOW;
+                dmg.full_damage = (dmg.full_damage*3)/2;
+                break;
+            default: //hit
+                break;
            }
-            else
-            {
-                //check for crushing hit            
-                if(!this->IsPlayer())
-                {    
-                    if(this->getLevel()-pVictim->getLevel() >=3)
-                    {
-                        if(Rand((self_skill-victim_skill)*2))
-                        {
-                            hit_status |= HITSTATUS_CRUSHINGBLOW;
-                            // full_damage is a uint32, now, multiplying it by 1.5 is the same thing as multiplying it by 1
-                            // i'm pretty sure this isn't supposed to be, maybe put full_damage in a tmp double variable, make
-                            // the math and recast back to uint32 ? os full_damage should be a double ?
-                            // for now i do the first assumption
-                            //dmg.full_damage *= 1.5;
-                            double tmpDmg = (double)dmg.full_damage;
-                            tmpDmg *= 1.5;
-                            dmg.full_damage = (uint32)tmpDmg;
-                        }
-                    }
-                }
-                else if(!pVictim->IsPlayer()&&(!ability))    //glancing
-                {
-                    if(damage_type != RANGED)
-                    {
-                        if(Rand(10 + victim_skill - self_skill))
-                        {
-                            double damage_reduction = (10 + victim_skill - self_skill);
-                            if(damage_reduction > 0)
-                            {
-                                dmg.full_damage -= (damage_reduction*dmg.full_damage)/100;
-                                if(dmg.full_damage <= 0) dmg.full_damage = 1;
-                                hit_status |= HITSTATUS_GLANCING;
-                            }
-                        }
-                    }
-                }
-            }    
            //absorb apply
            uint32 dm = dmg.full_damage;
            abs = pVictim->AbsorbDamage(0,(uint32*)&dm);
@@ -1503,6 +1531,7 @@
                hit_status |= HITSTATUS_ABSORBED;
            }
        }
+        break;
    }
    //vstate=1-wound,2-dodge,3-parry,4-interrupt,5-block,6-evade,7-immune,8-deflect